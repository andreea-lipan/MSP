/*
The file 03-trees.vpr axiomatizes binary trees with integer values stored in leafs.

• Extend the Tree domain by a function size that takes a Tree and returns the number 
of leafs in the tree.

• Extend the Tree domain by a function sum that takes a Tree and returns the sum 
of all values stored in the tree.

• Test your domain against the following client (also found in the file but commented out)
*/


method client() {
    var t: Tree
    t := node(node(leaf(3), leaf(17)), leaf(22))

    // These verify
    assert sum(t) == 42
    assert size(t) == 3
}

// note: this is a tree with values only in the leaves
domain Tree { 
    
    // constructors
    function leaf(value: Int): Tree // <-- base case
    function node(left: Tree, right: Tree): Tree // composite case

    // discriminators (is_node is implicit via !is_leaf(t))
    function is_leaf(t: Tree): Bool
    function size(t: Tree): Int
    function sum(t: Tree): Int

    // destructors
    function value(t: Tree): Int 
    function left(t: Tree): Tree
    function right(t: Tree): Tree

    // axioms
    axiom def_is_leaf {
        forall x: Int :: is_leaf(leaf(x)) 
    }

    axiom def_not_is_leaf {
        forall l: Tree, r: Tree :: !is_leaf(node(l,r))
    }

    axiom all_variants {
        forall t: Tree ::
            (is_leaf(t) && exists x: Int :: t == leaf(x))
            || (!is_leaf(t) && exists l: Tree, r: Tree :: t == node(l, r))
    }

    // Size axioms
    axiom size_over_leaf {
        forall x: Int :: 
            size(leaf(x)) == 1
    }

    axiom size_over_node {
        forall l: Tree, r: Tree ::
            size(node(l, r)) == size(l) + size(r)
    }

    // Sum axioms
    axiom sum_over_leaf {
        forall x: Int :: 
            sum(leaf(x)) == x
    }

    axiom sum_over_node {
        forall l: Tree, r: Tree ::
            sum(node(l, r)) == sum(l) + sum(r)
    }

    // Value of leaf axiom
    axiom value_over_leaf {
        forall x: Int :: value(leaf(x)) == x
    }

    // Value of left node
    axiom left_over_node {
        forall l: Tree, r: Tree ::
            left(node(l, r)) == l
    }

    // Value of right node
    axiom right_over_node {
        forall l: Tree, r: Tree ::
            right(node(l, r)) == r
    }
}

