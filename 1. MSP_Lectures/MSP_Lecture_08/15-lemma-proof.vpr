function fac(x: Int): Int
{ x <= 1 ? 1 : x * fac(x-1) }
  
method client(x: Int) returns (y: Int)
  requires x > 0
  ensures y > 2
{
   var z: Int := fac(x)
   
   lemma_fac_pos(x)

   y := z + z + z
   
}

define V(n) (n) // <-- macro for variant

method lemma_fac_pos(n: Int)
  requires n >= 0
  ensures fac(n) > 0
  // decreases V(n) 
{
    var v: Int := V(n); assert v >= 0 // set up variant
    if (n == 0) {
         assert fac(0) == 1
    } else {
        assert n-1 >= 0
        assert V(n-1) < v // <-- variant decreases
        lemma_fac_pos(n-1)
        assert fac(n-1) > 0
    }
}
