domain X {
    function fac(x: Int): Int 
    function fac0(x: Int): Int

    axiom {
        forall x: Int ::
            (x <= 1 ==> fac(x) == 1) && 
            (x > 1 ==> fac(x) == x * fac0(x-1))
    }
}


method client() 
{
    assert fac(1) == 1
    assert fac(2) == 2
}


function fac2(x: Int): Int  {
    (x <= 1) ? 1 : x * fac2(x-1) 
}

method client2() 
{
    assert fac(2) == 2
}

method client3()
{
    // Does not fail for Viper's encoding
    assert fac2(1) == 1
    assert fac2(2) == 2
}

