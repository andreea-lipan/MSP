// --------- Requirements ----------
// Find the invariant and check it in Viper

// --------- Solution ----------
// I've also done the variant (used to verify the termination of a loop)

method main() {
    var n: Int; var m: Int; var res: Int
    
    assume n >= 0 && m >= 0
    
    var x: Int := n
    var y: Int := m
    res := 0
    
    while (x > 0)
        invariant x * y + res == n * m && x >= 0    // invariant
    {
        var z: Int := x               // variant
        assert z >= 0                 // variant

        if (x % 2 == 1) {
            res := res + y
        }
        x := x / 2 // right shift
        y := y * 2 // Left shift

        assert x >= 0                // variant
        assert x < z                 // variant
    }
    assert res == n * m
}