domain X {
    function fac(x: Int): Int 

    axiom {
        forall x: Int ::
            fac(x) == (x <= 1 ? 1 : x * fac(x-1))
    }
}

method client() 
{
    var n: Int 
    // TODO: uncomment at your own risk
    // assert fac(n) != 0
}


function fac2(x: Int): Int  {
    (x <= 1) ? 1 : x * fac2(x-1) 
}

method client2() 
{
    var n: Int 
    // fails, since Viper uses a different encoding
    assert fac2(n) != 0
}

